version: '3'
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf # all configuration panel
      - ./.docker/nginx/app/FPM/local.conf:/etc/nginx/conf.d/default.conf # app panel example
      - ./.docker/nginx/admin/local.conf:/etc/nginx/conf.d/admin.conf # admin panel example
      - ./.docker/nginx/web/local.conf:/etc/nginx/conf.d/web.conf # web panel example
      - ./.data/nginx/logs:/var/log/nginx
      - ./app:/var/www/app
      - ./admin:/var/www/admin
      # - ./.data/certs/certbot/conf:/etc/letsencrypt # uncomment when production deploy
      # - ./.data/certs/certbot/www:/var/www/certbot # uncomment when production deploy
    ports:
      - "80:80"
      # - "443:443" # uncomment when production deploy
    depends_on:
      - app
      - web
      - admin
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=nginx

  app:
    build:
      context: .
      dockerfile: ./.docker/app/FPM/${PHP_VERSION}/Dockerfile
    container_name: app
    command: ["php", "/var/www/app/artisan", "octane:start", "--host=0.0.0.0", "--port=8000", "--server=swoole", "--workers=4", "--watch"]
    #command: ["sh", "-c", "composer install && php /var/www/app/artisan octane:start --host=0.0.0.0 --port=8000 --server=swoole --workers=4 --watch"]
    #command: ["php", "/var/www/app/artisan", "octane:start", "--host=0.0.0.0", "--port=8000", "--server=swoole", "--workers=4", "--task-workers=6"]   #uncomment when production deploy
    volumes:
      - ./app:/var/www/app
    restart: always
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=app

  admin:
    build:
      context: .
      dockerfile: ./.docker/admin/${PHP_VERSION}/Dockerfile
    container_name: admin
    volumes:
      - ./admin:/var/www/admin
    restart: always
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=admin

  web:
    build:
      context: .
      dockerfile: ./.docker/web/Dockerfile
    container_name: web
    stdin_open: true
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - ./web/.env
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=web

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./.data/redis:/data
    entrypoint: redis-server --appendonly yes
    restart: always
    networks:
      - application_network

  worker:
    build:
      context: .
      dockerfile: ./.docker/worker/FPM/${PHP_VERSION}/Dockerfile
    container_name: worker
    command:
      - /usr/bin/supervisord
      - -c
      - /etc/supervisord.conf
    volumes:
      - ./app:/var/www/app
      - ./.data/logs/worker:/var/log
      - ./.docker/worker/FPM/${PHP_VERSION}/worker.conf:/etc/supervisor/conf.d/worker.conf
    networks:
      - application_network
    environment:
      - X_SERVER_TYPE=worker

  database:
    container_name: database
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /data/postgres
    volumes:
      - ./.data/postgres:/data/postgres
    #  - ./.docker/postgres/initdb:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    restart: always
    networks:
      - application_network

  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    ports:
      - 1026:1025 # SMTP server
      - 8025:8025 # Web UI
    networks:
      - application_network


  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./.data/certs/certbot/conf:/etc/letsencrypt
      - ./.data/certs/certbot/www:/var/www/certbot
    networks:
      - application_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  ngrok:
    image: ngrok/ngrok
    container_name: ngrok
    ports:
      - "4041:4040"
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTH}
    command: http --domain=${NGROK_DOMAIN} nginx:80
    depends_on:
      - nginx
    networks:
      - application_network

volumes:
  pgdata:
  redis:
    driver: local

networks:
  application_network:
    driver: bridge
